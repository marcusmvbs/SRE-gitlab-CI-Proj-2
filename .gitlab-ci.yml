image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' 

stages:
  - validate
  - plan
  - apply
  - ansible_configure
  - destroy

before_script: 
  - apk update
  - apk add --no-cache gnupg python3 py3-crcmod py3-pip
  - pip install google-auth google-auth-httplib2 google-auth-oauthlib
  - apk add --no-cache ansible curl
  - ansible-galaxy collection install kubernetes.core

  - mkdir -p ./creds
  - echo $serviceaccount | base64 -d > ./creds/service_account.json

  - curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-443.0.0-linux-x86_64.tar.gz
  - tar -xzf google-cloud-cli-443.0.0-linux-x86_64.tar.gz -C /usr/local/
  - ln -s /usr/local/google-cloud-sdk/bin/gcloud /usr/local/bin/gcloud # folder link

  - gcloud components install kubectl
  - gcloud components update
  - gcloud config set core/disable_usage_reporting true
  - gcloud config set component_manager/disable_update_check true
  - gcloud --version
  - gcloud auth activate-service-account --key-file=./creds/service_account.json

  - echo 'export PATH=$PATH:/usr/local/google-cloud-sdk/bin' >> /etc/profile
  - source /etc/profile
  
  - cd terraform/
  - /usr/local/google-cloud-sdk/bin/gsutil cp gs://tf-state-bucket-mvb/default.tfstate .
  - chmod +x /usr/local/google-cloud-sdk/bin/gsutil
  - rm -rf .terraform
  - terraform --version
  - terraform init

validate:
  stage: validate
  script:
    - terraform validate
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

plan:
  stage: plan
  script:
    - terraform plan -out "planfile" # Reads the config file and compares to current state
  dependencies:
    - validate
  artifacts:
    paths:
      - terraform/planfile
      - terraform/default.tfstate
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

apply:
  stage: apply
  script:
    - terraform apply -input=false "planfile"
  dependencies:
    - plan
  when: manual
  needs:
    - job: plan
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

ansible_configure:
  stage: ansible_configure
  script:
    - cd ../ansible/
    - ansible-playbook -i inventory.ini playbook.yaml
    - gcloud container clusters get-credentials primary --zone=us-central1-a --project=pioneering-rex-394919

    # Set release names
    - FLUENT_BIT_RELEASE=my-fluent-bit
    - REDIS_RELEASE=my-redis
    - NGINX_RELEASE=my-nginx
    - POSTGRES_RELEASE=my-postgresql
    - PROMETHEUS_RELEASE=my-prometheus
    - INGRESS_NAME=my-ingress-ctrl
    - KASTEN_RELEASE=my-kasten

    # Install Fluent Bit from Helm Repo
    - |
      if ! helm list -n default --all --short | grep -q "^$FLUENT_BIT_RELEASE$"; then
       echo "Installing Helm chart $FLUENT_BIT_RELEASE..."
       helm install $FLUENT_BIT_RELEASE fluent/fluent-bit --namespace default
      else
        echo "Helm chart $FLUENT_BIT_RELEASE is already installed"
      fi

    # Install Redis using Helm
    - |
      if ! helm list -n default --all --short | grep -q "^$REDIS_RELEASE$"; then
        echo "Installing Helm chart $REDIS_RELEASE..."
        helm install $REDIS_RELEASE bitnami/redis --namespace default
      else
        echo "Helm chart $REDIS_RELEASE is already installed"
      fi

    # Install Nginx server using Helm
    - |
      if ! helm list -n default --all --short | grep -q "^$NGINX_RELEASE$"; then
        echo "Installing Helm chart $NGINX_RELEASE..."
        helm install $NGINX_RELEASE bitnami/nginx --namespace default
      else
        echo "Helm chart $NGINX_RELEASE is already installed"
      fi

    # Install PostgreSQL using Helm
    - |
      if ! helm list -n default --all --short | grep -q "^$POSTGRES_RELEASE$"; then
       echo "Installing Helm chart $POSTGRES_RELEASE..."
       helm install $POSTGRES_RELEASE bitnami/postgresql --namespace default
      else
        echo "Helm chart $POSTGRES_RELEASE is already installed"
      fi

    # Install Prometheus using Helm
    - |
      if ! helm list -n default --all --short | grep -q "^$PROMETHEUS_RELEASE$"; then
       echo "Installing Helm chart $PROMETHEUS_RELEASE..."
       helm install $PROMETHEUS_RELEASE prometheus-community/prometheus --namespace default
      else
       echo "Helm chart $PROMETHEUS_RELEASE is already installed"
      fi

    # Check if nginx-ingress Helm chart is already installed
    - |
      if ! helm list -n ingress --all --short | grep -q "^$INGRESS_NAME$"; then
        echo "Installing Helm chart $RELEASE_NAME..."
        helm install $RELEASE_NAME ingress-nginx/ingress-nginx --namespace default --version 4.7.1 
      else
        echo "Helm chart $RELEASE_NAME is already installed"
      fi

    # Install Kasten K10 using Helm
    - |  
      if ! helm list -n default --all --short | grep -q "^$KASTEN_RELEASE$"; then
       echo "Installing Helm chart $KASTEN_RELEASE..."
         helm install $KASTEN_RELEASE kasten/k10 --namespace default
      else
       echo "Helm chart $KASTEN_RELEASE is already installed"
      fi
      
    - pwd
    - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    - kubectl apply -f ../application.yaml
   
  needs:
    - job: apply
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

destroy:
  stage: destroy
  script:
    - terraform destroy --auto-approve
  dependencies:
    - plan
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'